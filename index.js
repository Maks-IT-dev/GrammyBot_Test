require("dotenv").config();
const { Bot, GrammyError, HttpError, Keyboard, InlineKeyboard } = require("grammy");
const { hydrate } = require("@grammyjs/hydrate")

const bot = new Bot(process.env.BOT_API_KEY);
bot.use(hydrate())

bot.api.setMyCommands([
    {
        command: "start",
        description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞",
    },
    {
        command: "menu",
        description: "–û—Ç—Ä–∏–º–∞—Ç–∏ –º–µ–Ω—é",
    },
    // {
    //     command: "mood",
    //     description: "–û—Ü—ñ–Ω–∏—Ç–∏ –Ω–∞—Å—Ç—Ä—ñ–π",
    // },
    // {
    //     command: "share",
    //     description: "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –¥–∞–Ω–Ω–∏–º–∏",
    // },
    // {
    //     command: "inline_keyboard",
    //     description: "–Ü–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞",
    // },
])

// bot.command("start", async (ctx) => {
//     await ctx.reply("–ü—Ä–∏–≤—ñ—Ç! –Ø - –±–æ—Ç. –¢–≥ –∫–∞–Ω–∞–ª: <a href='https://t.me//TestBotLearn'>—Å–∏–ª–∫–∞</a>", {
//         // reply_parameters: {message_id: ctx.msg.message_id}    –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
//         parse_mode: "HTML"
//     })
// })

bot.command("start", async (ctx) => {
    await ctx.react("üî•")
    await ctx.reply("–ü—Ä–∏–≤—ñ—Ç\\! –Ø \\- –±–æ—Ç\\. –¢–≥ –∫–∞–Ω–∞–ª: [—Ü–µ —Å–∏–ª–∫–∞](https://t.me//TestBotLearn)", {
        parse_mode: "MarkdownV2",
        disable_web_page_prewiew: true     //–ø–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–µ–≤'—é –∑ —Å–∏–ª–∫–æ—é
    })
})


const menuKeyboard = new InlineKeyboard()
    .text("–î—ñ–∑–Ω–∞—Ç–∏—Å—è —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "order-status")
    .text("–ó–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É", "support")
const backKeyboard = new InlineKeyboard().text("< –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back")

bot.command("menu", async (ctx) => {
    await ctx.reply("–í–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é", {
        reply_markup: menuKeyboard,
    })
})

bot.callbackQuery("order-status", async (ctx) => {
    await ctx.callbackQuery.message.editText("–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: –≤ –¥–æ—Ä–æ–∑—ñ", {
        reply_markup: backKeyboard,
    })
    await ctx.answerCallbackQuery()
})

bot.callbackQuery("support", async (ctx) => {
    await ctx.callbackQuery.message.editText("–ù–∞–ø–∏—à—ñ—Ç—å –í–∞—à –∑–∞–ø–∏—Ç", {
        reply_markup: backKeyboard,
    })
    await ctx.answerCallbackQuery()
})

bot.callbackQuery("back", async (ctx) => {
    await ctx.callbackQuery.message.editText("–í–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é", {
        reply_markup: menuKeyboard,
    })
    await ctx.answerCallbackQuery()
})


// –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
bot.command("mood", async (ctx) => {
    const moodKeyboard = new Keyboard().text("–î–æ–±—Ä–µ").row().text("–ù–æ—Ä–º").row().text("–ü–æ–≥–∞–Ω–æ").resized()

    // const moodLabels = ["–î–æ–±—Ä–µ", "–ù–æ—Ä–º", "–ü–æ–≥–∞–Ω–æ"]
    // const rows = moodLabels.map((label) => {
    //     return [
    //         Keyboard.text(label)
    //     ]
    //})
    // const moodKeyboard2 = Keyboard.from(rows).resized()
    await ctx.reply("–Ø–∫–∏–π –Ω–∞—Å—Ç—Ä—ñ–π?", {
        reply_markup: moodKeyboard
    })
})

bot.command("share", async (ctx) => {
    shareKeyboard = new Keyboard().requestLocation("–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è").requestContact("–ö–æ–Ω—Ç–∞–∫—Ç").
        requestPoll("–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è").placeholder("–í–∫–∞–∂–∏ –¥–∞–Ω–Ω—ñ...").resized()

    await ctx.reply("–ß–∏–º —Ö–æ—á–µ—à –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—å?", {
        reply_markup: shareKeyboard
    })
})

bot.command("inline_keyboard", async (ctx) => {
    // const inlineKeyboard = new InlineKeyboard()
    //     .text("1", "button-1").row()
    //     .text("2", "button-2").row()
    //     .text("3", "button-3")
    
    // 2 —Å–ø–æ—Å—ñ–±
    const inlineKeyboard2 = new InlineKeyboard().url("–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–≥-–∫–∞–Ω–∞–ª", "https://t.me//TestBotLearn")
    await ctx.reply("–ù–∞–∂–º—ñ—Ç—å –∫–Ω–æ–ø–∫—É", {
        reply_markup: inlineKeyboard2,
    })
})

// bot.callbackQuery(/button-[1-3]/, async (ctx) => {
//     await ctx.answerCallbackQuery()
//     await ctx.reply(`–í–∏ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É ${ctx.callbackQuery.data}`)
// })

// bot.on("callback_query:data", async (ctx) => {
//     await ctx.answerCallbackQuery()
//     await ctx.reply(`–í–∏ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É ${ctx.callbackQuery.data}`)
// })

// bot.on(":contact", async (ctx) => {
//     await ctx.reply("–î—è–∫—É—é –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç!")
// })

// bot.hears("–î–æ–±—Ä–µ", async (ctx) => {
//     await ctx.reply("–ö–ª–∞—Å—Å!", {
//         reply_markup: { remove_keyboard: true }
//     })
// })

// bot.command("start", async (ctx) => {
//     await ctx.reply("–ü—Ä–∏–≤—ñ—Ç\\! –Ø \\- –±–æ—Ç\\. –¢–≥ –∫–∞–Ω–∞–ª: *–∂–∏—Ä–Ω–∏–π* _–∫—É—Ä—Å–∏–≤_", {                    –ñ–∏—Ä–Ω–∏–π —ñ –∫—É—Ä—Å–∏–≤
//         parse_mode: "MarkdownV2"
//     })
// })

// bot.on(":media", "::url", async (ctx) => {
//     await ctx.reply("–û—Ç—Ä–∏–º–∞–≤ —Å–∏–ª–∫—É");                      –°–∏–ª–∫–∞
// });

// bot.on("msg").filter((ctx) => {
//     return ctx.from.id === 608375269 //–º—ñ–π id
// }, async (ctx) => {                                   –§—ñ–ª—å—Ç–µ—Ä
//     await ctx.reply("–ü—Ä–∏–≤—ñ—Ç, –∞–¥–º—ñ–Ω!")
// })

// bot.on("msg", async (ctx) => {
//     console.log(ctx.msg)                         —ñ–Ω—Ñ–∞ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ
// })

// bot.hears("ID",  async (ctx) => {
//     await ctx.reply(`–í–∞—à ID: ${ctx.from.id}`)       ID
// })

// bot.hears(/–∫–∞–ø–µ—Ü—å/,  async (ctx) => {             —Å–ª–æ–≤–æ –≤ —Ç–µ–∫—Å—Ç—ñ
//     await ctx.reply("–°–≤–∞—Ä–∏–º—Å—è?")
// })


bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`Error while handing update ${ctx.update.update_id}:`);
    const e = err.error;

    if (e instanceof GrammyError) {
        console.error("Error in request:", e.description);
    } else if (e instanceof HttpError) {
        console.error("Could not contact Telegram", e);
    } else {
        console.error("Unknown error:", e);
    }
});

bot.start();